"use strict";var ApplicationConfiguration=function(){var applicationModuleName="estimate-swarm",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.utils","ngMaterial","ui.tree","ngAria"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]).config(function($mdThemingProvider){$mdThemingProvider.theme("default").primaryPalette("indigo").accentPalette("yellow")}).constant("RESOURCE_DOMAIN",""),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("projects"),ApplicationConfiguration.registerModule("reports"),ApplicationConfiguration.registerModule("sidenav"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus","$location","$mdSidenav","$mdUtil",function($scope,Authentication,Menus,$location,$mdSidenav,$mdUtil){function buildToggler(navID){var debounceFn=$mdUtil.debounce(function(){$mdSidenav(navID).toggle().then(function(){})},300);return debounceFn}$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1}),$scope.goTo=function(route){$location.path(route)},$scope.onProjects=function(){return"/projects"===$location.path()},$scope.sidenav=$mdSidenav,$scope.toggleLeft=buildToggler("left")}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").controller("MainController",["$scope",function($scope){}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("projects").config(["$stateProvider",function($stateProvider){$stateProvider.state("listProjects",{url:"/projects",templateUrl:"modules/projects/views/list-projects.client.view.html"}).state("createProject",{url:"/projects/create",templateUrl:"modules/projects/views/create-project.client.view.html"}).state("viewProject",{url:"/projects/:projectId",templateUrl:"modules/projects/views/view-project.client.view.html"}).state("editProject",{url:"/projects/:projectId/edit",templateUrl:"modules/projects/views/edit-project.client.view.html"})}]),angular.module("projects").controller("CreateProjectController",["$scope","$stateParams","$location","Authentication","Projects","$http","$mdToast","$mdDialog","$timeout","$rootScope","RESOURCE_DOMAIN",function($scope,$stateParams,$location,Authentication,Projects,$http,$mdToast,$mdDialog,$timeout,$rootScope,RESOURCE_DOMAIN){$scope.authentication=Authentication,$scope.people=[],$http.get(RESOURCE_DOMAIN+"/users/getUsers").success(function(users){for(var i in users)$scope.people.push(users[i].username)}),$scope.selected=[],$scope.toggle=function(item,list){var idx=list.indexOf(item);idx>-1?list.splice(idx,1):list.push(item)},$scope.exists=function(item,list){return list.indexOf(item)>-1},$scope.createProject=function(){var project=new Projects({name:$scope.projectName,description:$scope.description,users:$scope.selected,owner:$scope.authentication.user.username,openForEstimation:!1});project.$save(function(response){$location.path("projects/"+project._id+"/edit"),$mdToast.show($mdToast.simple().content("Project created").position($scope.getToastPosition()).hideDelay(3e3))},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.toastPosition={bottom:!0,top:!1,left:!1,right:!0},$scope.getToastPosition=function(){return Object.keys($scope.toastPosition).filter(function(pos){return $scope.toastPosition[pos]}).join(" ")}}]),angular.module("projects").controller("ProjectEditController",["$scope","$stateParams","$location","Authentication","Projects","$http","$mdToast","$mdDialog","$timeout","$rootScope","RESOURCE_DOMAIN",function($scope,$stateParams,$location,Authentication,Projects,$http,$mdToast,$mdDialog,$timeout,$rootScope,RESOURCE_DOMAIN){function DialogController($scope,$mdDialog){$scope.hide=function(){$mdDialog.hide()},$scope.cancel=function(){$mdDialog.cancel()}}$scope.members=!0,$scope.estimated=!1,$scope.goTo=function(route){$location.path(route)},$scope.authentication=Authentication,$scope.userIndex=-1;var project={projectId:$stateParams.projectId};$http({method:"POST",url:RESOURCE_DOMAIN+"/project",data:project}).success(function(data){if(0!==data.length){var tmp=data[0];for(var u in tmp.users)tmp.users[u]===$scope.authentication.user.username&&($scope.userIndex=u);if(-1===$scope.userIndex){var toast=$mdToast.simple().content("Not authorised to estimate").action("").highlightAction(!1).position($scope.getToastPosition());$mdToast.show(toast)}}}),$scope.rootIsEmpty=function(){return $scope.project.$resolved!==!1?$scope.project.children.length<1?!0:!1:void 0},$scope.owner=function(){return $scope.project.$resolved!==!1?$scope.project.owner===$scope.authentication.user.username?!0:!1:void 0},$scope.estimator=function(){return-1===$scope.userIndex?!1:!0},$scope.submitEstimation=function(){$scope.saveProject(),$scope.estimated=!0,$scope.determineEstimations()},$scope.determineEstimations=function(){for(var i=0;i<$scope.project.users.length;++i)if(null===$scope.project.children[0].estimations[i])return;$scope.sendEstimationReport()},$scope.sendEstimationReport=function(){$http({method:"POST",url:RESOURCE_DOMAIN+"/reports",data:$scope.project}).success(function(data){})},$scope.openForEstimation=function(){var confirm=$mdDialog.confirm().parent(angular.element(document.body)).title("Are you sure you want to open the project for estimations?").content("This will allow estimators to estimate, but will lock the project tree to its current state.").ariaLabel("Open for estimation").ok("Yes").cancel("No");$mdDialog.show(confirm).then(function(){$timeout(function(){$scope.project.openForEstimation=!0,$scope.saveProject();var project={projectId:$scope.project._id};$http({method:"POST",url:RESOURCE_DOMAIN+"/sendInvites",data:project}).success(function(data){})})},function(){})},$scope.isOpenForEstimation=function(){return $scope.project.$resolved!==!1?$scope.project.openForEstimation:!1},$scope.addRootNode=function(){var estimationsArr=[];for(var i in $scope.project.users)estimationsArr.push(null);$scope.project.children.push({id:"node",title:"Root Node",nodes:[],collapsed:!1,estimations:estimationsArr})},$scope.update=function(){var project=$scope.project;project.$update(function(){$location.path("projects/"+project._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.projects=Projects.query()},$scope.findOne=function(){$scope.project=Projects.get({projectId:$stateParams.projectId},function(){null===$scope.project.children[0].estimations[$scope.userIndex]?$scope.estimated=!1:$scope.estimated=!0})},$scope.newSubItem=function(scope){var nodeData=scope.$modelValue,estimationsArr=[];for(var i in scope.project.users)estimationsArr.push(null);nodeData.nodes.push({id:10*nodeData.id+nodeData.nodes.length,title:nodeData.title+"."+(nodeData.nodes.length+1),nodes:[],collapsed:!1,estimations:estimationsArr})},$scope.undoToolTip=function(node,removeNode,newSubItem){var tree=$.extend(!0,[],$scope.project.children);removeNode(node);var toast=$mdToast.simple().content("Node deleted").action("UNDO").highlightAction(!1).position($scope.getToastPosition());$mdToast.show(toast).then(function(){$scope.project.children=$.extend(!0,[],tree)})},$scope.toastPosition={bottom:!0,top:!1,left:!1,right:!0},$scope.getToastPosition=function(){return Object.keys($scope.toastPosition).filter(function(pos){return $scope.toastPosition[pos]}).join(" ")},$scope.saveProject=function(){$scope.project.$update(function(response){$mdToast.show($mdToast.simple().content("Project saved").position($scope.getToastPosition()).hideDelay(3e3))},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.querySearch=function(query){var results=query?$scope.projects.filter(createFilterFor(query)):$scope.projects;return results},$scope.searchTextChange=function(text){console.log("Text changed to "+text)},$scope.selectedItemChange=function(item){console.log(item),$scope.goTo("/projects/"+item._id+"/edit")};var createFilterFor=function(query){var lowercaseQuery=angular.lowercase(query);return function(item){var name=angular.lowercase(item.name);return 0===name.indexOf(lowercaseQuery)}};$scope.collapseAll=function(){$scope.$broadcast("collapseAll")},$scope.expandAll=function(){$scope.$broadcast("expandAll")},$scope.showDescriptionDialog=function(ev,node){$scope.currentNode=node,$scope.setCurrentNode(node,function(){var newScope=$scope.$new();$mdDialog.show({controller:DialogController,templateUrl:"modules/projects/views/description.dialog.client.view.html",parent:angular.element(document.body),targetEvent:ev,scope:newScope})})},$scope.updateLocalTree=function(scope){var result,count=$scope.userIndex,currnode=$scope.project.children[0];$scope.getEstimation(currnode,count,function(res){result=res})},$scope.getEstimation=function(node,userNum,callback){if(node.nodes.length<=0)callback(node.estimations[userNum]);else{node.estimations[userNum]=null;for(var i in node.nodes)$scope.getEstimation(node.nodes[i],userNum,function(result){null===node.estimations[userNum]?node.estimations[userNum]=parseInt(result):node.estimations[userNum]+=parseInt(result),callback(parseInt(result))})}},$scope.currentNode=void 0,$scope.setCurrentNode=function(node,callback){$scope.currentNode=node,void 0!==callback&&callback()},$scope.$on("$locationChangeStart",function(event,newUrl,oldUrl){if(!$scope.confirm){event.preventDefault();var confirm=$mdDialog.confirm().parent(angular.element(document.body)).title("Are you sure you want to leave this page?").content("All unsaved changes will be lost.").ariaLabel("Yes").ok("Yes").cancel("No").targetEvent(event);$mdDialog.show(confirm).then(function(){newUrl=newUrl.split("#!"),$scope.goTo(newUrl[1]),$scope.confirm=!0},function(){})}})}]),angular.module("projects").controller("ProjectsController",["$scope","$stateParams","$location","Authentication","Projects","$http","$mdToast","$mdDialog","$timeout","$rootScope","RESOURCE_DOMAIN",function($scope,$stateParams,$location,Authentication,Projects,$http,$mdToast,$mdDialog,$timeout,$rootScope,RESOURCE_DOMAIN){function DialogController($scope,$mdDialog){$scope.hide=function(){$mdDialog.hide()},$scope.cancel=function(){$mdDialog.cancel()}}$scope.goTo=function(route){$location.path(route)},$scope.owner=function(project){return Authentication.user.username===project.owner?!0:!1},$scope.createProject=function(){var project=new Projects({name:$scope.projectName,description:$scope.description,users:$scope.selected});project.$save(function(response){$location.path("projects/"+project._id+"/edit"),$mdToast.show($mdToast.simple().content("Project created").position($scope.getToastPosition()).hideDelay(3e3))},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.deleteProject=function(project){var confirm=$mdDialog.confirm().parent(angular.element(document.body)).title("Are you sure you wish to delete project "+project.name+"?").content("This will delete the project and prevent it from showing up in the list of projects.").ariaLabel("Delete the project").ok("Yes").cancel("No");$mdDialog.show(confirm).then(function(){$timeout(function(){$scope.remove(project)})},function(){})},$scope.toastPosition={bottom:!0,top:!1,left:!1,right:!0},$scope.getToastPosition=function(){return Object.keys($scope.toastPosition).filter(function(pos){return $scope.toastPosition[pos]}).join(" ")},$scope.remove=function(project){if(project){project.$remove();for(var i in $scope.projects)$scope.projects[i]===project&&$scope.projects.splice(i,1)}else $scope.project.$remove(function(){$location.path("projects")})},$scope.update=function(){var project=$scope.project;project.$update(function(){$location.path("projects/"+project._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.projects=Projects.query()},$scope.findOne=function(){$scope.project=Projects.get({projectId:$stateParams.projectId})},$scope.updateProjects=function(){$scope.projects=Projects.query()},$scope.querySearch=function(query){var results=query?$scope.projects.filter(createFilterFor(query)):$scope.projects;return results},$scope.searchTextChange=function(text){console.log("Text changed to "+text)},$scope.selectedItemChange=function(item){console.log(item),$scope.goTo("/projects/"+item._id+"/edit")};var createFilterFor=function(query){var lowercaseQuery=angular.lowercase(query);return function(item){var name=angular.lowercase(item.name);return 0===name.indexOf(lowercaseQuery)}};$scope.collapseAll=function(){$scope.$broadcast("collapseAll")},$scope.expandAll=function(){$scope.$broadcast("expandAll")},$scope.showDescriptionDialog=function(ev,node){$scope.currentNode=node,$scope.setCurrentNode(node,function(){var newScope=$scope.$new();$mdDialog.show({controller:DialogController,templateUrl:"modules/projects/views/description.dialog.client.view.html",parent:angular.element(document.body),targetEvent:ev,scope:newScope})})},$scope.isOverflow=function(){var element=document.getElementById("marquee");return element.scrollWidth>element.clientWidth?!0:!1},$scope.isNotOverflow=function(){var element=document.getElementById("marquee");return element.scrollHeight>element.clientHeight||element.scrollWidth>element.clientWidth?!1:!0},$scope.test=function(){console.log("here")}}]),angular.module("projects").factory("Projects",["$resource","RESOURCE_DOMAIN",function($resource,RESOURCE_DOMAIN){return $resource(RESOURCE_DOMAIN+"/projects/:projectId",{projectId:"@_id"},{update:{method:"PUT"}})}]),angular.module("reports").config(["$stateProvider",function($stateProvider){$stateProvider.state("listReports",{url:"/reports",templateUrl:"modules/reports/views/list-reports.client.view.html"}).state("createReport",{url:"/reports/create",templateUrl:"modules/reports/views/create-report.client.view.html"}).state("viewReport",{url:"/reports/:reportId",templateUrl:"modules/reports/views/view-report.client.view.html"}).state("editReport",{url:"/reports/:reportId/edit",templateUrl:"modules/reports/views/edit-report.client.view.html"})}]),angular.module("reports").controller("ReportsController",["$scope","$stateParams","$location","Authentication","Reports",function($scope,$stateParams,$location,Authentication,Reports){$scope.authentication=Authentication,$scope.create=function(){var report=new Reports({name:this.name});report.$save(function(response){$location.path("reports/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(report){if(report){report.$remove();for(var i in $scope.reports)$scope.reports[i]===report&&$scope.reports.splice(i,1)}else $scope.report.$remove(function(){$location.path("reports")})},$scope.update=function(){var report=$scope.report;report.$update(function(){$location.path("reports/"+report._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.reports=Reports.query()},$scope.findOne=function(){$scope.report=Reports.get({reportId:$stateParams.reportId})}}]),angular.module("reports").factory("Reports",["$resource","RESOURCE_DOMAIN",function($resource,RESOURCE_DOMAIN){return $resource(RESOURCE_DOMAIN+"reports/:reportId",{reportId:"@_id"},{update:{method:"PUT"}})}]),angular.module("sidenav").run(["Menus",function(Menus){}]),angular.module("sidenav").config(["$stateProvider",function($stateProvider){$stateProvider.state("dialog",{url:"/dialog",templateUrl:"modules/sidenav/views/dialog.client.view.html"})}]),angular.module("sidenav").controller("SidenavController",["$scope","$http","$mdDialog","$location","Authentication","Logindialog","$mdUtil","$mdSidenav","$log","RESOURCE_DOMAIN",function($scope,$http,$mdDialog,$location,Authentication,Logindialog,$mdUtil,$mdSidenav,$log,RESOURCE_DOMAIN){function DialogController($scope,$mdDialog){$scope.hide=function(){$mdDialog.hide()},$scope.cancel=function(){$mdDialog.cancel()}}function buildToggler(navID){var debounceFn=$mdUtil.debounce(function(){$mdSidenav(navID).toggle().then(function(){$log.debug("toggle "+navID+" is done")})},300);return debounceFn}$scope.authentication=Authentication,$scope.signin=Logindialog.signin,$scope.signup=Logindialog.signup,$scope.forgotPass=Logindialog.forgotPass;var showAdvanced=function(ev){$mdDialog.show({controller:DialogController,templateUrl:"modules/sidenav/views/dialog.client.view.html",parent:angular.element(document.body),targetEvent:ev})};$scope.signinDialog=function(ev){Logindialog.signin=!0,Logindialog.signup=!1,Logindialog.forgotPass=!1,showAdvanced(ev)},$scope.signupDialog=function(ev){Logindialog.signin=!1,Logindialog.signup=!0,Logindialog.forgotPass=!1,showAdvanced(ev)},$scope.toggleLeft=buildToggler("left"),$scope.go=function(path){$location.path(path)},$scope.signOut=function(){$http.get(RESOURCE_DOMAIN+"/auth/signout").success(function(response){$location.path(response)}),$http.get(RESOURCE_DOMAIN+"/auth/signout").success(function(response){$scope.authentication.user=null,$location.path("/")}).error(function(response){})}}]).controller("LeftCtrl",function($scope,$timeout,$mdSidenav,$log){$scope.close=function(){$mdSidenav("left").close().then(function(){$log.debug("close LEFT is done")})}}),angular.module("sidenav").factory("Logindialog",[function(){var properties={signin:!0,signup:!1,forgotPass:!1};return properties}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","$mdDialog","Authentication","RESOURCE_DOMAIN",function($scope,$http,$location,$mdDialog,Authentication,RESOURCE_DOMAIN){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post(RESOURCE_DOMAIN+"/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$mdDialog.cancel(),$location.path("/projects")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post(RESOURCE_DOMAIN+"/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$mdDialog.cancel(),$mdToast.show($mdToast.simple().content("Login successful").position($scope.getToastPosition()).hideDelay(3e3)),$location.path("/projects")}).error(function(response){$scope.error=response.message})},$scope.toastPosition={bottom:!0,top:!1,left:!1,right:!0},$scope.getToastPosition=function(){return Object.keys($scope.toastPosition).filter(function(pos){return $scope.toastPosition[pos]}).join(" ")}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","RESOURCE_DOMAIN",function($scope,$stateParams,$http,$location,Authentication,RESOURCE_DOMAIN){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post(RESOURCE_DOMAIN+"/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post(RESOURCE_DOMAIN+"/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication","RESOURCE_DOMAIN",function($scope,$http,$location,Users,Authentication,RESOURCE_DOMAIN){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"](RESOURCE_DOMAIN+"/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post(RESOURCE_DOMAIN+"/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource","RESOURCE_DOMAIN",function($resource,RESOURCE_DOMAIN){return $resource(RESOURCE_DOMAIN+"/users",{},{update:{method:"PUT"}})}]);